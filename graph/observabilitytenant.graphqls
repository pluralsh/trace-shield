scalar Duration
scalar FloatMap
scalar StringMap

"Representation a tenant in the Grafana observability stack where metrics, logs and traces can be sent to or retrieved from."
type ObservabilityTenant {
  "The unique id of the tenant."
  id: ID!

  "The display name of the tenant."
  displayName: String

  # "The organization that the tenant belongs to."
  # organization: Organization!

  "The users, groups or clients that are admins of the observability tenant and can change its permissions."
  admins: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can read metrics from the tenant."
  metricsReaders: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can write metrics to the tenant."
  metricsWriters: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can delete metrics from the tenant."
  metricsDeleters: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can read metric rules from the tenant."
  metricsRulesReaders: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can write metric rules to the tenant."
  metricsRulesWriters: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can delete metric rules from the tenant."
  metricsRulesDeleters: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can view the Alertmanager UI and get the Alertmanager configuration for a tenant."
  metricsAlertsReaders: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can create silences in the Alertmanager UI and create and delete the Alertmanager configuration for a tenant."
  metricsAlertsWriters: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can read logs from the tenant."
  logsReaders: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can write logs to the tenant."
  logsWriters: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can delete logs from the tenant."
  logsDeleters: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can read log rules from the tenant."
  logsRulesReaders: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can write log rules to the tenant."
  logsRulesWriters: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can delete log rules from the tenant."
  logsRulesDeleters: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can read traces from the tenant."
  tracesReaders: ObservabilityTenantPermissionBindings

  "The users, groups or clients that can write traces to the tenant."
  tracesWriters: ObservabilityTenantPermissionBindings

  "The limits of the tenant."
  limits: ObservabilityTenantLimits
}

"Representation of the limits of a tenant."
type ObservabilityTenantLimits {
  "The limits for Mimir for the tenant."
  mimir: MimirLimits

  "The limits for Loki for the tenant."
  loki: LokiLimits

  "The limits for Tempo for the tenant."
  tempo: TempoLimits
}

"Inputs for the limits of a tenant."
input ObservabilityTenantLimitsInput {
  "The limits for Mimir for the tenant."
  mimir: MimirLimitsInput

  "The limits for Loki for the tenant."
  loki: LokiLimitsInput

  "The limits for Tempo for the tenant."
  tempo: TempoLimitsInput
}

"Representation of the users, groups and oauth2 clients that have a set of permissions on a tenant."
type ObservabilityTenantPermissionBindings {
  "The users that have a particular permission on a tenant."
  users: [User!]

  "The groups have a particular permission on a tenant."
  groups: [Group!]

  "The oauth2 clients  have a particular permission on a tenant."
  oauth2Clients: [OAuth2Client!] # TODO: add check so that an oauth2 client can only be added to a single tenant
}

input ObservabilityTenantPermissionBindingsInput {
  "The IDs or email addresses of users that can view a tenant."
  users: [UserInput!]

  "The names of groups that can view a tenant."
  groups: [GroupInput!]

  "The clientIDs oauth2 clients that can send data a tenant."
  oauth2Clients: [OAuth2ClientInput!]
}

extend type Query {
  "Get a list of all users."
  listObservabilityTenants: [ObservabilityTenant!]! @checkPermissions @isAuthenticated

  getObservabilityTenant(
    "The unique ID of the tenant."
    id: ID!
  ): ObservabilityTenant! @checkPermissions @isAuthenticated
}

extend type Mutation {
  "Create an observability tenant."
  createObservabilityTenant(
    "The unique ID of the tenant."
    id: ID!
    "The display name of the tenant."
    name: String
    "The users, groups or clients that are admins of the observability tenant and can change its permissions."
    admins: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can read metrics from the tenant."
    metricsReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can write metrics to the tenant."
    metricsWriters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can delete metrics from the tenant."
    metricsDeleters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can read metric rules from the tenant."
    metricsRulesReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can write metric rules to the tenant."
    metricsRulesWriters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can delete metric rules from the tenant."
    metricsRulesDeleters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can view the Alertmanager UI and get the Alertmanager configuration for a tenant."
    metricsAlertsReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can create silences in the Alertmanager UI and create and delete the Alertmanager configuration for a tenant."
    metricsAlertsWriters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can read logs from the tenant."
    logsReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can write logs to the tenant."
    logsWriters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can delete logs from the tenant."
    logsDeleters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can read log rules from the tenant."
    logsRulesReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can write log rules to the tenant."
    logsRulesWriters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can delete log rules from the tenant."
    logsRulesDeleters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can read traces from the tenant."
    tracesReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can write traces to the tenant."
    tracesWriters: ObservabilityTenantPermissionBindingsInput
    "The limits for the tenant."
    limits: ObservabilityTenantLimitsInput
  ): ObservabilityTenant! @checkPermissions @isAuthenticated

  "Update an observability tenant."
  updateObservabilityTenant(
    "The unique ID of the tenant."
    id: ID!
    "The display name of the tenant."
    name: String
    "The users, groups or clients that are admins of the observability tenant and can change its permissions."
    admins: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can read metrics from the tenant."
    metricsReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can write metrics to the tenant."
    metricsWriters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can delete metrics from the tenant."
    metricsDeleters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can read metric rules from the tenant."
    metricsRulesReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can write metric rules to the tenant."
    metricsRulesWriters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can delete metric rules from the tenant."
    metricsRulesDeleters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can view the Alertmanager UI and get the Alertmanager configuration for a tenant."
    metricsAlertsReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can create silences in the Alertmanager UI and create and delete the Alertmanager configuration for a tenant."
    metricsAlertsWriters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can read logs from the tenant."
    logsReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can write logs to the tenant."
    logsWriters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can delete logs from the tenant."
    logsDeleters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can read log rules from the tenant."
    logsRulesReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can write log rules to the tenant."
    logsRulesWriters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can delete log rules from the tenant."
    logsRulesDeleters: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can read traces from the tenant."
    tracesReaders: ObservabilityTenantPermissionBindingsInput
    "The users, groups or clients that can write traces to the tenant."
    tracesWriters: ObservabilityTenantPermissionBindingsInput
    "The limits for the tenant."
    limits: ObservabilityTenantLimitsInput
  ): ObservabilityTenant! @checkPermissions @isAuthenticated

  "Delete an observability tenant."
  deleteObservabilityTenant(
    "The unique ID of the tenant."
    id: ID!
  ): ObservabilityTenant! @checkPermissions @isAuthenticated
}
