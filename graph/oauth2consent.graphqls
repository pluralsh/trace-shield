"OAuth2ConsentRequest represents an OAuth 2.0 consent request."
type OAuth2ConsentRequest {
  "ACR represents the Authentication AuthorizationContext Class Reference value for this authentication session. You can use it to express that, for example, a user authenticated using two factor authentication."
  acr: String

  "AMR represents the Authentication Methods References. It lists the method used to authenticate the end-user. For instance, if the end-user authenticated using password and OTP, the AMR value would be [\"pwd\", \"otp\"]."
  amr: [String!]

  "The challenge is a random string which is used to identify the consent request."
  challenge: String!

  "The client is the OAuth 2.0 Client requesting the OAuth 2.0 Authorization."
  client: OAuth2Client!

  "Context contains arbitrary context that is forwarded from the login request. This is useful if you want to pass data from the login request to the consent request."
  context: Map

  "LoginChallenge is the login challenge this consent challenge belongs to. It can be used to associate a login and consent request in the login & consent app."
  loginChallenge: String

  "LoginSessionID is the login session ID. If the user-agent reuses a login session (via cookie / remember flag) this ID will remain the same. If the user-agent did not have an existing authentication session (e.g. remember is false) this will be a new random value. This value is used as the \"sid\" parameter in the ID Token and in OIDC Front-/Back- channel logout. It's value can generally be used to associate consecutive login requests by a certain user."
  loginSessionId: String

  "OIDCContext contains the OIDC context of the request. If the OAuth 2.0 Authorization request was not an OpenID Connect request, this value will be nil."
  oidcContext: OidcContext

  "RequestURL is the original OAuth 2.0 Authorization URL requested by the OAuth 2.0 client. It is the URL which initiates the OAuth 2.0 Authorization Code or OAuth 2.0 Implicit flow. This URL is typically not needed, but might come in handy if you want to deal with additional request parameters."
  requestUrl: String

  "RequestedAccessTokenAudience contains the audience (client) that the OAuth 2.0 Client requested the OAuth 2.0 Access Token to be issued for."
  requestedAccessTokenAudience: [String!]

  "RequestedScope contains the OAuth 2.0 Scope requested by the OAuth 2.0 Client."
  requestedScope: [String!]

  "Skip is true when the client has requested the same scopes from the same user before. If this is true, you can skip asking the user to grant the requested scopes, or you can force showing the UI by setting this value to false."
  skip: Boolean

  "Subject is the user ID of the end-user that authenticated. This value will be set to the 'sub' claim in the ID Token."
  subject: String!

  "The URL to redirect to if an error occurred."
  redirectTo: String
}

"OIDC Context for a consent request."
type OidcContext {
  "ACRValues is the Authentication AuthorizationContext Class Reference requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses which level of authentication (e.g. 2FA) is required.  OpenID Connect defines it as follows: > Requested Authentication AuthorizationContext Class Reference values. Space-separated string that specifies the acr values that the Authorization Server is being requested to use for processing this Authentication Request, with the values appearing in order of preference. The Authentication AuthorizationContext Class satisfied by the authentication performed is returned as the acr Claim Value, as specified in Section 2. The acr Claim is requested as a Voluntary Claim by this parameter."
  acrValues: [String!]

  "Display is the display mode requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses how the Authorization Server displays authentication and consent user interfaces to the End-User.  OpenID Connect defines it as follows: > ASCII string value that specifies how the Authorization Server displays the authentication and consent user interface pages to the End-User. The defined values are: page: The Authorization Server SHOULD display the authentication and consent UI consistent with a full User Agent page view. If the display parameter is not specified, this is the default display mode. popup: The Authorization Server SHOULD display the authentication and consent UI consistent with a popup User Agent window. The popup User Agent window should be of an appropriate size for a login-focused dialog and should not obscure the entire window that it is popping up over. touch: The Authorization Server SHOULD display the authentication and consent UI consistent with a device that leverages a touch interface. > The display parameter is used only if the prompt parameter value is not none. If the prompt parameter value is none, the display parameter is ignored."
  display: String

  "IDTokenHintClaims contains the claims from the ID Token hint if it was present in the OAuth 2.0 Authorization request."
  idTokenHintClaims: Map

  "LoginHint is the login hint requested in the OAuth 2.0 Authorization request. It is a parameter defined by OpenID Connect and expresses the preferred login identifier the End-User might use to log in (if necessary).  OpenID Connect defines it as follows: > Hint to the Authorization Server about the login identifier the End-User might use to log in (if necessary). > This hint can be used by an RP if it first asks the End-User for their e-mail address (or other identifier) and then wants to pass that value as a hint to the discovered authorization service. > It is RECOMMENDED that the hint value match the value used for discovery. > This value MAY also be a phone number in the format specified for the phone_number Claim. > The use of this parameter is left to the OP's discretion."
  loginHint: String

  "UILocales is the End-User'id preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For instance, the value \"fr-CA fr en\" represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). An error SHOULD NOT result if some or all of the requested locales are not supported by the OpenID Provider."
  uiLocales: [String!]
}

type OAuth2RedirectTo {
  "RedirectTo can be used to redirect the user-agent to a specific location. This is useful if you want to redirect the user-agent to a specific location after the consent flow has been completed."
  redirectTo: String!
}

input AcceptOAuth2ConsentRequestSession {
  "AccessToken sets session data for the access and refresh token, as well as any future tokens issued by the refresh grant. Keep in mind that this data will be available to anyone performing OAuth 2.0 Challenge Introspection. If only your services can perform OAuth 2.0 Challenge Introspection, this is usually fine. But if third parties can access that endpoint as well, sensitive data from the session might be exposed to them. Use with care!"
  accessToken: Map

  "IDToken sets session data for the OpenID Connect ID token. Keep in mind that the session'id payloads are readable by anyone that has access to the ID Challenge. Use with care!"
  idToken: Map
}

extend type Query {
  "OAuth2ConsentRequest returns the OAuth 2.0 consent request information."
  oauth2ConsentRequest(
    "The challenge to fetch the consent request for."
    challenge: String!
  ): OAuth2ConsentRequest
}

extend type Mutation {
  "AcceptOAuth2ConsentRequest accepts an OAuth 2.0 consent request. If the request was granted, a code or access token will be issued. If the request was denied, the request will be rejected."
  acceptOAuth2ConsentRequest(
    "The challenge to accept."
    challenge: String!

    "The audience to grant."
    grantAccessTokenAudience: [String!]

    "The scopes to grant."
    grantScope: [String!]

    "Remember, if set to true, tells ORY Hydra to remember this consent authorization and reuse it if the same client asks the same user for the same, or a subset of, scope."
    remember: Boolean

    "RememberFor sets how long the consent authorization should be remembered for in seconds. If set to 0, the authorization will be remembered indefinitely."
    rememberFor: Int

    "The session to set for the granted OAuth 2.0 request."
    session: AcceptOAuth2ConsentRequestSession
  ): OAuth2RedirectTo!

  "RejectOAuth2ConsentRequest rejects an OAuth 2.0 consent request."
  rejectOAuth2ConsentRequest(
    "The challenge to reject."
    challenge: String!
  ): OAuth2RedirectTo!
}
