"Representation a group of users."
type Group {
  "The unique name of the group."
  name: String!

  "The users that are admins of the organization."
  members: [User!]

  # "The organization that the group belongs to."
  # organization: Organization!
}

"Input for a group using its name."
input GroupInput {
  "The name of the group."
  name: String!
}

extend type Query {
  "Get a list of all users."
  listGroups: [Group!] @checkPermissions @isAuthenticated

  "Get a group by its name."
  getGroup(
    "The unique name of the group."
    name: String!
  ): Group! @checkPermissions @isAuthenticated
}

extend type Mutation {
  "Create a group."
  createGroup(
    "The unique name of the group."
    name: String!

    "The IDs or email addresses of the users that are members of the group."
    members: [UserInput!]
  ): Group! @checkPermissions @isAuthenticated

  "Update a group."
  updateGroup(
    "The unique name of the group."
    name: String!

    "The IDs or email addresses of the users that are members of the group."
    members: [UserInput!]
  ): Group! @checkPermissions @isAuthenticated

  "Delete a group."
  deleteGroup(
    "The unique name of the group."
    name: String!
  ): Group! @checkPermissions @isAuthenticated
}
