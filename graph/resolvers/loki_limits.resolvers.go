package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"fmt"
	"strings"

	"github.com/pluralsh/trace-shield-controller/api/observability/v1alpha1"
	"github.com/pluralsh/trace-shield/graph/generated"
	"github.com/pluralsh/trace-shield/graph/model"
)

// Types is the resolver for the types field.
func (r *blockedQueryResolver) Types(ctx context.Context, obj *v1alpha1.BlockedQuery) ([]model.BlockedQueryType, error) {
	types := strings.Split(*obj.Types, ",")
	output := make([]model.BlockedQueryType, len(types))
	for i, t := range types {
		output[i] = model.BlockedQueryType(t)
	}
	return output, nil
}

// RulerAlertManagerConfig is the resolver for the rulerAlertManagerConfig field.
func (r *lokiLimitsInputResolver) RulerAlertManagerConfig(ctx context.Context, obj *v1alpha1.LokiLimitsInput, data *model.RulerAlertManagerConfigInput) error {
	panic(fmt.Errorf("not implemented: RulerAlertManagerConfig - rulerAlertManagerConfig"))
}

// StreamRetention is the resolver for the streamRetention field.
func (r *lokiLimitsInputResolver) StreamRetention(ctx context.Context, obj *v1alpha1.LokiLimitsInput, data []*model.StreamRetentionInput) error {
	panic(fmt.Errorf("not implemented: StreamRetention - streamRetention"))
}

// ShardStreams is the resolver for the shardStreams field.
func (r *lokiLimitsInputResolver) ShardStreams(ctx context.Context, obj *v1alpha1.LokiLimitsInput, data *model.ShardstreamsConfigInput) error {
	panic(fmt.Errorf("not implemented: ShardStreams - shardStreams"))
}

// BlockedQueries is the resolver for the blockedQueries field.
func (r *lokiLimitsInputResolver) BlockedQueries(ctx context.Context, obj *v1alpha1.LokiLimitsInput, data []*model.BlockedQueryInput) error {
	panic(fmt.Errorf("not implemented: BlockedQueries - blockedQueries"))
}

// BlockedQuery returns generated.BlockedQueryResolver implementation.
func (r *Resolver) BlockedQuery() generated.BlockedQueryResolver { return &blockedQueryResolver{r} }

// LokiLimitsInput returns generated.LokiLimitsInputResolver implementation.
func (r *Resolver) LokiLimitsInput() generated.LokiLimitsInputResolver {
	return &lokiLimitsInputResolver{r}
}

type blockedQueryResolver struct{ *Resolver }
type lokiLimitsInputResolver struct{ *Resolver }
