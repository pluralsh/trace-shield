package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	"github.com/pluralsh/trace-shield-controller/api/observability/v1alpha1"
	"github.com/pluralsh/trace-shield/graph/generated"
	"github.com/pluralsh/trace-shield/graph/model"
	prom_v1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
)

// MetricRelabelConfigs is the resolver for the metricRelabelConfigs field.
func (r *mimirLimitsInputResolver) MetricRelabelConfigs(ctx context.Context, obj *v1alpha1.MimirLimitsInput, data []*model.RelabelConfigInput) error {
	obj.MetricRelabelConfigs = make([]v1alpha1.RelabelConfig, len(data))
	for i, input := range data {
		obj.MetricRelabelConfigs[i] = v1alpha1.RelabelConfig{
			TargetLabel: input.TargetLabel,
			Regex:       input.Regex,
			Modulus:     input.Modulus,
		}
		if input.Action != nil {
			action := input.Action.String()
			obj.MetricRelabelConfigs[i].Action = &action
		}
		if input.SourceLabels != nil {
			obj.MetricRelabelConfigs[i].SourceLabels = make([]*prom_v1.LabelName, len(input.SourceLabels))
			for j, label := range input.SourceLabels {
				output := prom_v1.LabelName(*label)
				obj.MetricRelabelConfigs[i].SourceLabels[j] = &output
			}
		}
	}
	return nil
}

// MimirLimitsInput returns generated.MimirLimitsInputResolver implementation.
func (r *Resolver) MimirLimitsInput() generated.MimirLimitsInputResolver {
	return &mimirLimitsInputResolver{r}
}

type mimirLimitsInputResolver struct{ *Resolver }
