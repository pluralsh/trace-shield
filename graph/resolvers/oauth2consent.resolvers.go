package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"

	hydra "github.com/ory/hydra-client-go/v2"
	"github.com/pluralsh/trace-shield/graph/model"
	"github.com/pluralsh/trace-shield/handlers"
	"github.com/pluralsh/trace-shield/utils"
)

// AcceptOAuth2ConsentRequest is the resolver for the acceptOAuth2ConsentRequest field.
func (r *mutationResolver) AcceptOAuth2ConsentRequest(ctx context.Context, challenge string, grantAccessTokenAudience []string, grantScope []string, remember *bool, rememberFor *int64) (*model.OAuth2RedirectTo, error) {
	userCtx := handlers.ForContext(ctx)

	accessToken := &model.ConsentRequestSessionAccessToken{}
	idToken := &model.ConsentRequestSessionIDToken{}

	if userCtx != nil {

		accessToken.Subject = &userCtx.Id
		idToken.Subject = &userCtx.Id

		if grantScope != nil && &userCtx.Email != nil {
			if utils.StringContains(grantScope, "email") {
				idToken.Email = &userCtx.Email
			}
		}
	} else {
		r.C.Log.Info("No user context found for OAuth2 consent request")
	}

	outSession := &hydra.AcceptOAuth2ConsentRequestSession{
		AccessToken: accessToken,
		IdToken:     idToken,
	}

	return r.C.AcceptOAuth2ConsentRequest(ctx, challenge, grantAccessTokenAudience, grantScope, remember, rememberFor, outSession)
}

// RejectOAuth2ConsentRequest is the resolver for the rejectOAuth2ConsentRequest field.
func (r *mutationResolver) RejectOAuth2ConsentRequest(ctx context.Context, challenge string) (*model.OAuth2RedirectTo, error) {
	return r.C.RejectOAuth2ConsentRequest(ctx, challenge)
}

// Oauth2ConsentRequest is the resolver for the oauth2ConsentRequest field.
func (r *queryResolver) Oauth2ConsentRequest(ctx context.Context, challenge string) (*model.OAuth2ConsentRequest, error) {
	return r.C.GetOAuth2ConsentRequest(ctx, challenge)
}
