// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package gqlclient

import (
	"context"
	"net/http"
	"time"

	"github.com/Yamashou/gqlgenc/clientv2"
)

type TraceShieldGraphQLClient interface {
	ListOAuth2Clients(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*ListOAuth2Clients, error)
	GetOAuth2Client(ctx context.Context, clientID string, interceptors ...clientv2.RequestInterceptor) (*GetOAuth2Client, error)
	DeleteOAuth2Client(ctx context.Context, clientID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOAuth2Client, error)
	UpdateOAuth2Client(ctx context.Context, allowedCorsOrigins []string, audience []string, authorizationCodeGrantAccessTokenLifespan *string, authorizationCodeGrantIDTokenLifespan *string, authorizationCodeGrantRefreshTokenLifespan *string, backChannelLogoutSessionRequired *bool, backChannelLogoutURI *string, clientCredentialsGrantAccessTokenLifespan *string, clientID string, clientName *string, clientSecret *string, clientSecretExpiresAt *int64, clientURI *string, contacts []string, frontchannelLogoutSessionRequired *bool, frontchannelLogoutURI *string, grantTypes []string, implicitGrantAccessTokenLifespan *string, implicitGrantIDTokenLifespan *string, jwks map[string]interface{}, jwksURI *string, jwtBearerGrantAccessTokenLifespan *string, logoURI *string, metadata map[string]interface{}, policyURI *string, postLogoutRedirectUris []string, redirectUris []string, responseTypes []string, scope *string, sectorIdentifierURI *string, subjectType *string, tokenEndpointAuthMethod *string, tokenEndpointAuthSigningAlgorithm *string, tosURI *string, userinfoSignedResponseAlgorithm *string, loginBindings *LoginBindingsInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOAuth2Client, error)
	CreateOAuth2Client(ctx context.Context, allowedCorsOrigins []string, audience []string, authorizationCodeGrantAccessTokenLifespan *string, authorizationCodeGrantIDTokenLifespan *string, authorizationCodeGrantRefreshTokenLifespan *string, backChannelLogoutSessionRequired *bool, backChannelLogoutURI *string, clientCredentialsGrantAccessTokenLifespan *string, clientName *string, clientSecret *string, clientSecretExpiresAt *int64, clientURI *string, contacts []string, frontchannelLogoutSessionRequired *bool, frontchannelLogoutURI *string, grantTypes []string, implicitGrantAccessTokenLifespan *string, implicitGrantIDTokenLifespan *string, jwks map[string]interface{}, jwksURI *string, jwtBearerGrantAccessTokenLifespan *string, logoURI *string, metadata map[string]interface{}, policyURI *string, postLogoutRedirectUris []string, redirectUris []string, responseTypes []string, scope *string, sectorIdentifierURI *string, subjectType *string, tokenEndpointAuthMethod *string, tokenEndpointAuthSigningAlgorithm *string, tosURI *string, userinfoSignedResponseAlgorithm *string, loginBindings *LoginBindingsInput, interceptors ...clientv2.RequestInterceptor) (*CreateOAuth2Client, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) TraceShieldGraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type Query struct {
	ListUsers                []*User                "json:\"listUsers\" graphql:\"listUsers\""
	GetUser                  User                   "json:\"getUser\" graphql:\"getUser\""
	ListGroups               []*Group               "json:\"listGroups,omitempty\" graphql:\"listGroups\""
	ListOAuth2Clients        []*OAuth2Client        "json:\"listOAuth2Clients\" graphql:\"listOAuth2Clients\""
	GetOAuth2Client          *OAuth2Client          "json:\"getOAuth2Client,omitempty\" graphql:\"getOAuth2Client\""
	Oauth2ConsentRequest     *OAuth2ConsentRequest  "json:\"oauth2ConsentRequest,omitempty\" graphql:\"oauth2ConsentRequest\""
	ListObservabilityTenants []*ObservabilityTenant "json:\"listObservabilityTenants\" graphql:\"listObservabilityTenants\""
	GetObservabilityTenant   ObservabilityTenant    "json:\"getObservabilityTenant\" graphql:\"getObservabilityTenant\""
	ListOrganizations        []*Organization        "json:\"listOrganizations\" graphql:\"listOrganizations\""
	Organization             Organization           "json:\"organization\" graphql:\"organization\""
}
type Mutation struct {
	CreateUser                 User                "json:\"createUser\" graphql:\"createUser\""
	DeleteUser                 User                "json:\"deleteUser\" graphql:\"deleteUser\""
	Group                      Group               "json:\"group\" graphql:\"group\""
	DeleteGroup                Group               "json:\"deleteGroup\" graphql:\"deleteGroup\""
	CreateOAuth2Client         OAuth2Client        "json:\"createOAuth2Client\" graphql:\"createOAuth2Client\""
	UpdateOAuth2Client         OAuth2Client        "json:\"updateOAuth2Client\" graphql:\"updateOAuth2Client\""
	DeleteOAuth2Client         OAuth2Client        "json:\"deleteOAuth2Client\" graphql:\"deleteOAuth2Client\""
	AcceptOAuth2ConsentRequest OAuth2RedirectTo    "json:\"acceptOAuth2ConsentRequest\" graphql:\"acceptOAuth2ConsentRequest\""
	RejectOAuth2ConsentRequest OAuth2RedirectTo    "json:\"rejectOAuth2ConsentRequest\" graphql:\"rejectOAuth2ConsentRequest\""
	CreateObservabilityTenant  ObservabilityTenant "json:\"createObservabilityTenant\" graphql:\"createObservabilityTenant\""
	UpdateObservabilityTenant  ObservabilityTenant "json:\"updateObservabilityTenant\" graphql:\"updateObservabilityTenant\""
	DeleteObservabilityTenant  ObservabilityTenant "json:\"deleteObservabilityTenant\" graphql:\"deleteObservabilityTenant\""
	Organization               Organization        "json:\"organization\" graphql:\"organization\""
}
type OAuth2ClientFragment struct {
	AllowedCorsOrigins                         []string                            "json:\"allowedCorsOrigins,omitempty\" graphql:\"allowedCorsOrigins\""
	Audience                                   []string                            "json:\"audience,omitempty\" graphql:\"audience\""
	AuthorizationCodeGrantAccessTokenLifespan  *string                             "json:\"authorizationCodeGrantAccessTokenLifespan,omitempty\" graphql:\"authorizationCodeGrantAccessTokenLifespan\""
	AuthorizationCodeGrantIDTokenLifespan      *string                             "json:\"authorizationCodeGrantIdTokenLifespan,omitempty\" graphql:\"authorizationCodeGrantIdTokenLifespan\""
	AuthorizationCodeGrantRefreshTokenLifespan *string                             "json:\"authorizationCodeGrantRefreshTokenLifespan,omitempty\" graphql:\"authorizationCodeGrantRefreshTokenLifespan\""
	BackChannelLogoutURI                       *string                             "json:\"backChannelLogoutUri,omitempty\" graphql:\"backChannelLogoutUri\""
	ClientCredentialsGrantAccessTokenLifespan  *string                             "json:\"clientCredentialsGrantAccessTokenLifespan,omitempty\" graphql:\"clientCredentialsGrantAccessTokenLifespan\""
	ClientID                                   *string                             "json:\"clientId,omitempty\" graphql:\"clientId\""
	ClientName                                 *string                             "json:\"clientName,omitempty\" graphql:\"clientName\""
	ClientSecret                               *string                             "json:\"clientSecret,omitempty\" graphql:\"clientSecret\""
	ClientSecretExpiresAt                      *int64                              "json:\"ClientSecretExpiresAt,omitempty\" graphql:\"ClientSecretExpiresAt\""
	ClientURI                                  *string                             "json:\"clientUri,omitempty\" graphql:\"clientUri\""
	Contacts                                   []string                            "json:\"contacts,omitempty\" graphql:\"contacts\""
	CreatedAt                                  *time.Time                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	FrontchannelLogoutSessionRequired          *bool                               "json:\"frontchannelLogoutSessionRequired,omitempty\" graphql:\"frontchannelLogoutSessionRequired\""
	FrontchannelLogoutURI                      *string                             "json:\"frontchannelLogoutUri,omitempty\" graphql:\"frontchannelLogoutUri\""
	GrantTypes                                 []string                            "json:\"grantTypes,omitempty\" graphql:\"grantTypes\""
	ImplicitGrantAccessTokenLifespan           *string                             "json:\"implicitGrantAccessTokenLifespan,omitempty\" graphql:\"implicitGrantAccessTokenLifespan\""
	ImplicitGrantIDTokenLifespan               *string                             "json:\"implicitGrantIdTokenLifespan,omitempty\" graphql:\"implicitGrantIdTokenLifespan\""
	Jwks                                       map[string]interface{}              "json:\"jwks,omitempty\" graphql:\"jwks\""
	JwksURI                                    *string                             "json:\"jwksUri,omitempty\" graphql:\"jwksUri\""
	JwtBearerGrantAccessTokenLifespan          *string                             "json:\"jwtBearerGrantAccessTokenLifespan,omitempty\" graphql:\"jwtBearerGrantAccessTokenLifespan\""
	LogoURI                                    *string                             "json:\"logoUri,omitempty\" graphql:\"logoUri\""
	Metadata                                   map[string]interface{}              "json:\"metadata,omitempty\" graphql:\"metadata\""
	Owner                                      *string                             "json:\"owner,omitempty\" graphql:\"owner\""
	PolicyURI                                  *string                             "json:\"policyUri,omitempty\" graphql:\"policyUri\""
	PostLogoutRedirectUris                     []string                            "json:\"postLogoutRedirectUris,omitempty\" graphql:\"postLogoutRedirectUris\""
	RedirectUris                               []string                            "json:\"redirectUris,omitempty\" graphql:\"redirectUris\""
	ResponseTypes                              []string                            "json:\"responseTypes,omitempty\" graphql:\"responseTypes\""
	Scope                                      *string                             "json:\"scope,omitempty\" graphql:\"scope\""
	SectorIdentifierURI                        *string                             "json:\"sectorIdentifierUri,omitempty\" graphql:\"sectorIdentifierUri\""
	SubjectType                                *string                             "json:\"subjectType,omitempty\" graphql:\"subjectType\""
	TokenEndpointAuthMethod                    *string                             "json:\"tokenEndpointAuthMethod,omitempty\" graphql:\"tokenEndpointAuthMethod\""
	TokenEndpointAuthSigningAlgorithm          *string                             "json:\"tokenEndpointAuthSigningAlgorithm,omitempty\" graphql:\"tokenEndpointAuthSigningAlgorithm\""
	TosURI                                     *string                             "json:\"tosUri,omitempty\" graphql:\"tosUri\""
	UpdatedAt                                  *time.Time                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UserinfoSignedResponseAlgorithm            *string                             "json:\"userinfoSignedResponseAlgorithm,omitempty\" graphql:\"userinfoSignedResponseAlgorithm\""
	Organization                               OAuth2ClientFragment_Organization   "json:\"organization\" graphql:\"organization\""
	LoginBindings                              *OAuth2ClientFragment_LoginBindings "json:\"loginBindings,omitempty\" graphql:\"loginBindings\""
}

func (t *OAuth2ClientFragment) GetAllowedCorsOrigins() []string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.AllowedCorsOrigins
}
func (t *OAuth2ClientFragment) GetAudience() []string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.Audience
}
func (t *OAuth2ClientFragment) GetAuthorizationCodeGrantAccessTokenLifespan() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.AuthorizationCodeGrantAccessTokenLifespan
}
func (t *OAuth2ClientFragment) GetAuthorizationCodeGrantIDTokenLifespan() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.AuthorizationCodeGrantIDTokenLifespan
}
func (t *OAuth2ClientFragment) GetAuthorizationCodeGrantRefreshTokenLifespan() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.AuthorizationCodeGrantRefreshTokenLifespan
}
func (t *OAuth2ClientFragment) GetBackChannelLogoutURI() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.BackChannelLogoutURI
}
func (t *OAuth2ClientFragment) GetClientCredentialsGrantAccessTokenLifespan() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.ClientCredentialsGrantAccessTokenLifespan
}
func (t *OAuth2ClientFragment) GetClientID() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.ClientID
}
func (t *OAuth2ClientFragment) GetClientName() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.ClientName
}
func (t *OAuth2ClientFragment) GetClientSecret() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.ClientSecret
}
func (t *OAuth2ClientFragment) GetClientSecretExpiresAt() *int64 {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.ClientSecretExpiresAt
}
func (t *OAuth2ClientFragment) GetClientURI() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.ClientURI
}
func (t *OAuth2ClientFragment) GetContacts() []string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.Contacts
}
func (t *OAuth2ClientFragment) GetCreatedAt() *time.Time {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.CreatedAt
}
func (t *OAuth2ClientFragment) GetFrontchannelLogoutSessionRequired() *bool {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.FrontchannelLogoutSessionRequired
}
func (t *OAuth2ClientFragment) GetFrontchannelLogoutURI() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.FrontchannelLogoutURI
}
func (t *OAuth2ClientFragment) GetGrantTypes() []string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.GrantTypes
}
func (t *OAuth2ClientFragment) GetImplicitGrantAccessTokenLifespan() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.ImplicitGrantAccessTokenLifespan
}
func (t *OAuth2ClientFragment) GetImplicitGrantIDTokenLifespan() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.ImplicitGrantIDTokenLifespan
}
func (t *OAuth2ClientFragment) GetJwks() map[string]interface{} {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.Jwks
}
func (t *OAuth2ClientFragment) GetJwksURI() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.JwksURI
}
func (t *OAuth2ClientFragment) GetJwtBearerGrantAccessTokenLifespan() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.JwtBearerGrantAccessTokenLifespan
}
func (t *OAuth2ClientFragment) GetLogoURI() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.LogoURI
}
func (t *OAuth2ClientFragment) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.Metadata
}
func (t *OAuth2ClientFragment) GetOwner() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.Owner
}
func (t *OAuth2ClientFragment) GetPolicyURI() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.PolicyURI
}
func (t *OAuth2ClientFragment) GetPostLogoutRedirectUris() []string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.PostLogoutRedirectUris
}
func (t *OAuth2ClientFragment) GetRedirectUris() []string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.RedirectUris
}
func (t *OAuth2ClientFragment) GetResponseTypes() []string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.ResponseTypes
}
func (t *OAuth2ClientFragment) GetScope() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.Scope
}
func (t *OAuth2ClientFragment) GetSectorIdentifierURI() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.SectorIdentifierURI
}
func (t *OAuth2ClientFragment) GetSubjectType() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.SubjectType
}
func (t *OAuth2ClientFragment) GetTokenEndpointAuthMethod() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.TokenEndpointAuthMethod
}
func (t *OAuth2ClientFragment) GetTokenEndpointAuthSigningAlgorithm() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.TokenEndpointAuthSigningAlgorithm
}
func (t *OAuth2ClientFragment) GetTosURI() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.TosURI
}
func (t *OAuth2ClientFragment) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.UpdatedAt
}
func (t *OAuth2ClientFragment) GetUserinfoSignedResponseAlgorithm() *string {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.UserinfoSignedResponseAlgorithm
}
func (t *OAuth2ClientFragment) GetOrganization() *OAuth2ClientFragment_Organization {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return &t.Organization
}
func (t *OAuth2ClientFragment) GetLoginBindings() *OAuth2ClientFragment_LoginBindings {
	if t == nil {
		t = &OAuth2ClientFragment{}
	}
	return t.LoginBindings
}

type OAuth2ClientFragment_Organization struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *OAuth2ClientFragment_Organization) GetName() string {
	if t == nil {
		t = &OAuth2ClientFragment_Organization{}
	}
	return t.Name
}

type OAuth2ClientFragment_LoginBindings_Users struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *OAuth2ClientFragment_LoginBindings_Users) GetID() string {
	if t == nil {
		t = &OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.ID
}
func (t *OAuth2ClientFragment_LoginBindings_Users) GetEmail() string {
	if t == nil {
		t = &OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.Email
}

type OAuth2ClientFragment_LoginBindings_Groups struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *OAuth2ClientFragment_LoginBindings_Groups) GetName() string {
	if t == nil {
		t = &OAuth2ClientFragment_LoginBindings_Groups{}
	}
	return t.Name
}

type OAuth2ClientFragment_LoginBindings struct {
	Users  []*OAuth2ClientFragment_LoginBindings_Users  "json:\"users,omitempty\" graphql:\"users\""
	Groups []*OAuth2ClientFragment_LoginBindings_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *OAuth2ClientFragment_LoginBindings) GetUsers() []*OAuth2ClientFragment_LoginBindings_Users {
	if t == nil {
		t = &OAuth2ClientFragment_LoginBindings{}
	}
	return t.Users
}
func (t *OAuth2ClientFragment_LoginBindings) GetGroups() []*OAuth2ClientFragment_LoginBindings_Groups {
	if t == nil {
		t = &OAuth2ClientFragment_LoginBindings{}
	}
	return t.Groups
}

type ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_Organization struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_Organization) GetName() string {
	if t == nil {
		t = &ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_Organization{}
	}
	return t.Name
}

type ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Users struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Users) GetID() string {
	if t == nil {
		t = &ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.ID
}
func (t *ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Users) GetEmail() string {
	if t == nil {
		t = &ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.Email
}

type ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Groups struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Groups) GetName() string {
	if t == nil {
		t = &ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Groups{}
	}
	return t.Name
}

type ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings struct {
	Users  []*ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Users  "json:\"users,omitempty\" graphql:\"users\""
	Groups []*ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings) GetUsers() []*ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Users {
	if t == nil {
		t = &ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings{}
	}
	return t.Users
}
func (t *ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings) GetGroups() []*ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings_Groups {
	if t == nil {
		t = &ListOAuth2Clients_ListOAuth2Clients_OAuth2ClientFragment_LoginBindings{}
	}
	return t.Groups
}

type GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_Organization struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_Organization) GetName() string {
	if t == nil {
		t = &GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_Organization{}
	}
	return t.Name
}

type GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Users struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Users) GetID() string {
	if t == nil {
		t = &GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.ID
}
func (t *GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Users) GetEmail() string {
	if t == nil {
		t = &GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.Email
}

type GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups) GetName() string {
	if t == nil {
		t = &GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups{}
	}
	return t.Name
}

type GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings struct {
	Users  []*GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Users  "json:\"users,omitempty\" graphql:\"users\""
	Groups []*GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings) GetUsers() []*GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Users {
	if t == nil {
		t = &GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings{}
	}
	return t.Users
}
func (t *GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings) GetGroups() []*GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups {
	if t == nil {
		t = &GetOAuth2Client_GetOAuth2Client_OAuth2ClientFragment_LoginBindings{}
	}
	return t.Groups
}

type DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_Organization struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_Organization) GetName() string {
	if t == nil {
		t = &DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_Organization{}
	}
	return t.Name
}

type DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Users struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Users) GetID() string {
	if t == nil {
		t = &DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.ID
}
func (t *DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Users) GetEmail() string {
	if t == nil {
		t = &DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.Email
}

type DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups) GetName() string {
	if t == nil {
		t = &DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups{}
	}
	return t.Name
}

type DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings struct {
	Users  []*DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Users  "json:\"users,omitempty\" graphql:\"users\""
	Groups []*DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings) GetUsers() []*DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Users {
	if t == nil {
		t = &DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings{}
	}
	return t.Users
}
func (t *DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings) GetGroups() []*DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups {
	if t == nil {
		t = &DeleteOAuth2Client_DeleteOAuth2Client_OAuth2ClientFragment_LoginBindings{}
	}
	return t.Groups
}

type UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_Organization struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_Organization) GetName() string {
	if t == nil {
		t = &UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_Organization{}
	}
	return t.Name
}

type UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users) GetID() string {
	if t == nil {
		t = &UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.ID
}
func (t *UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users) GetEmail() string {
	if t == nil {
		t = &UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.Email
}

type UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups) GetName() string {
	if t == nil {
		t = &UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups{}
	}
	return t.Name
}

type UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings struct {
	Users  []*UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users  "json:\"users,omitempty\" graphql:\"users\""
	Groups []*UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings) GetUsers() []*UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users {
	if t == nil {
		t = &UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings{}
	}
	return t.Users
}
func (t *UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings) GetGroups() []*UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups {
	if t == nil {
		t = &UpdateOAuth2Client_UpdateOAuth2Client_OAuth2ClientFragment_LoginBindings{}
	}
	return t.Groups
}

type CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_Organization struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_Organization) GetName() string {
	if t == nil {
		t = &CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_Organization{}
	}
	return t.Name
}

type CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users struct {
	ID    string "json:\"id\" graphql:\"id\""
	Email string "json:\"email\" graphql:\"email\""
}

func (t *CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users) GetID() string {
	if t == nil {
		t = &CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.ID
}
func (t *CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users) GetEmail() string {
	if t == nil {
		t = &CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users{}
	}
	return t.Email
}

type CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups struct {
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups) GetName() string {
	if t == nil {
		t = &CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups{}
	}
	return t.Name
}

type CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings struct {
	Users  []*CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users  "json:\"users,omitempty\" graphql:\"users\""
	Groups []*CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings) GetUsers() []*CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Users {
	if t == nil {
		t = &CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings{}
	}
	return t.Users
}
func (t *CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings) GetGroups() []*CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings_Groups {
	if t == nil {
		t = &CreateOAuth2Client_CreateOAuth2Client_OAuth2ClientFragment_LoginBindings{}
	}
	return t.Groups
}

type ListOAuth2Clients struct {
	ListOAuth2Clients []*OAuth2ClientFragment "json:\"listOAuth2Clients\" graphql:\"listOAuth2Clients\""
}

func (t *ListOAuth2Clients) GetListOAuth2Clients() []*OAuth2ClientFragment {
	if t == nil {
		t = &ListOAuth2Clients{}
	}
	return t.ListOAuth2Clients
}

type GetOAuth2Client struct {
	GetOAuth2Client *OAuth2ClientFragment "json:\"getOAuth2Client,omitempty\" graphql:\"getOAuth2Client\""
}

func (t *GetOAuth2Client) GetGetOAuth2Client() *OAuth2ClientFragment {
	if t == nil {
		t = &GetOAuth2Client{}
	}
	return t.GetOAuth2Client
}

type DeleteOAuth2Client struct {
	DeleteOAuth2Client *OAuth2ClientFragment "json:\"deleteOAuth2Client\" graphql:\"deleteOAuth2Client\""
}

func (t *DeleteOAuth2Client) GetDeleteOAuth2Client() *OAuth2ClientFragment {
	if t == nil {
		t = &DeleteOAuth2Client{}
	}
	return t.DeleteOAuth2Client
}

type UpdateOAuth2Client struct {
	UpdateOAuth2Client *OAuth2ClientFragment "json:\"updateOAuth2Client\" graphql:\"updateOAuth2Client\""
}

func (t *UpdateOAuth2Client) GetUpdateOAuth2Client() *OAuth2ClientFragment {
	if t == nil {
		t = &UpdateOAuth2Client{}
	}
	return t.UpdateOAuth2Client
}

type CreateOAuth2Client struct {
	CreateOAuth2Client *OAuth2ClientFragment "json:\"createOAuth2Client\" graphql:\"createOAuth2Client\""
}

func (t *CreateOAuth2Client) GetCreateOAuth2Client() *OAuth2ClientFragment {
	if t == nil {
		t = &CreateOAuth2Client{}
	}
	return t.CreateOAuth2Client
}

const ListOAuth2ClientsDocument = `query ListOAuth2Clients {
	listOAuth2Clients {
		... OAuth2ClientFragment
	}
}
fragment OAuth2ClientFragment on OAuth2Client {
	allowedCorsOrigins
	audience
	authorizationCodeGrantAccessTokenLifespan
	authorizationCodeGrantIdTokenLifespan
	authorizationCodeGrantRefreshTokenLifespan
	backChannelLogoutUri
	clientCredentialsGrantAccessTokenLifespan
	clientId
	clientName
	clientSecret
	ClientSecretExpiresAt
	clientUri
	contacts
	createdAt
	frontchannelLogoutSessionRequired
	frontchannelLogoutUri
	grantTypes
	implicitGrantAccessTokenLifespan
	implicitGrantIdTokenLifespan
	jwks
	jwksUri
	jwtBearerGrantAccessTokenLifespan
	logoUri
	metadata
	owner
	policyUri
	postLogoutRedirectUris
	redirectUris
	responseTypes
	scope
	sectorIdentifierUri
	subjectType
	tokenEndpointAuthMethod
	tokenEndpointAuthSigningAlgorithm
	tosUri
	updatedAt
	userinfoSignedResponseAlgorithm
	organization {
		name
	}
	loginBindings {
		users {
			id
			email
		}
		groups {
			name
		}
	}
}
`

func (c *Client) ListOAuth2Clients(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*ListOAuth2Clients, error) {
	vars := map[string]interface{}{}

	var res ListOAuth2Clients
	if err := c.Client.Post(ctx, "ListOAuth2Clients", ListOAuth2ClientsDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetOAuth2ClientDocument = `query GetOAuth2Client ($clientId: ID!) {
	getOAuth2Client(clientId: $clientId) {
		... OAuth2ClientFragment
	}
}
fragment OAuth2ClientFragment on OAuth2Client {
	allowedCorsOrigins
	audience
	authorizationCodeGrantAccessTokenLifespan
	authorizationCodeGrantIdTokenLifespan
	authorizationCodeGrantRefreshTokenLifespan
	backChannelLogoutUri
	clientCredentialsGrantAccessTokenLifespan
	clientId
	clientName
	clientSecret
	ClientSecretExpiresAt
	clientUri
	contacts
	createdAt
	frontchannelLogoutSessionRequired
	frontchannelLogoutUri
	grantTypes
	implicitGrantAccessTokenLifespan
	implicitGrantIdTokenLifespan
	jwks
	jwksUri
	jwtBearerGrantAccessTokenLifespan
	logoUri
	metadata
	owner
	policyUri
	postLogoutRedirectUris
	redirectUris
	responseTypes
	scope
	sectorIdentifierUri
	subjectType
	tokenEndpointAuthMethod
	tokenEndpointAuthSigningAlgorithm
	tosUri
	updatedAt
	userinfoSignedResponseAlgorithm
	organization {
		name
	}
	loginBindings {
		users {
			id
			email
		}
		groups {
			name
		}
	}
}
`

func (c *Client) GetOAuth2Client(ctx context.Context, clientID string, interceptors ...clientv2.RequestInterceptor) (*GetOAuth2Client, error) {
	vars := map[string]interface{}{
		"clientId": clientID,
	}

	var res GetOAuth2Client
	if err := c.Client.Post(ctx, "GetOAuth2Client", GetOAuth2ClientDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const DeleteOAuth2ClientDocument = `mutation DeleteOAuth2Client ($clientId: String!) {
	deleteOAuth2Client(clientId: $clientId) {
		... OAuth2ClientFragment
	}
}
fragment OAuth2ClientFragment on OAuth2Client {
	allowedCorsOrigins
	audience
	authorizationCodeGrantAccessTokenLifespan
	authorizationCodeGrantIdTokenLifespan
	authorizationCodeGrantRefreshTokenLifespan
	backChannelLogoutUri
	clientCredentialsGrantAccessTokenLifespan
	clientId
	clientName
	clientSecret
	ClientSecretExpiresAt
	clientUri
	contacts
	createdAt
	frontchannelLogoutSessionRequired
	frontchannelLogoutUri
	grantTypes
	implicitGrantAccessTokenLifespan
	implicitGrantIdTokenLifespan
	jwks
	jwksUri
	jwtBearerGrantAccessTokenLifespan
	logoUri
	metadata
	owner
	policyUri
	postLogoutRedirectUris
	redirectUris
	responseTypes
	scope
	sectorIdentifierUri
	subjectType
	tokenEndpointAuthMethod
	tokenEndpointAuthSigningAlgorithm
	tosUri
	updatedAt
	userinfoSignedResponseAlgorithm
	organization {
		name
	}
	loginBindings {
		users {
			id
			email
		}
		groups {
			name
		}
	}
}
`

func (c *Client) DeleteOAuth2Client(ctx context.Context, clientID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOAuth2Client, error) {
	vars := map[string]interface{}{
		"clientId": clientID,
	}

	var res DeleteOAuth2Client
	if err := c.Client.Post(ctx, "DeleteOAuth2Client", DeleteOAuth2ClientDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const UpdateOAuth2ClientDocument = `mutation UpdateOAuth2Client ($allowedCorsOrigins: [String!], $audience: [String!], $authorizationCodeGrantAccessTokenLifespan: String, $authorizationCodeGrantIdTokenLifespan: String, $authorizationCodeGrantRefreshTokenLifespan: String, $backChannelLogoutSessionRequired: Boolean, $backChannelLogoutUri: String, $clientCredentialsGrantAccessTokenLifespan: String, $clientId: String!, $clientName: String, $clientSecret: String, $ClientSecretExpiresAt: Int, $clientUri: String, $contacts: [String!], $frontchannelLogoutSessionRequired: Boolean, $frontchannelLogoutUri: String, $grantTypes: [String!], $implicitGrantAccessTokenLifespan: String, $implicitGrantIdTokenLifespan: String, $jwks: Map, $jwksUri: String, $jwtBearerGrantAccessTokenLifespan: String, $logoUri: String, $metadata: Map, $policyUri: String, $postLogoutRedirectUris: [String!], $redirectUris: [String!], $responseTypes: [String!], $scope: String, $sectorIdentifierUri: String, $subjectType: String, $tokenEndpointAuthMethod: String, $tokenEndpointAuthSigningAlgorithm: String, $tosUri: String, $userinfoSignedResponseAlgorithm: String, $loginBindings: LoginBindingsInput) {
	updateOAuth2Client(allowedCorsOrigins: $allowedCorsOrigins, audience: $audience, authorizationCodeGrantAccessTokenLifespan: $authorizationCodeGrantAccessTokenLifespan, authorizationCodeGrantIdTokenLifespan: $authorizationCodeGrantIdTokenLifespan, authorizationCodeGrantRefreshTokenLifespan: $authorizationCodeGrantRefreshTokenLifespan, backChannelLogoutSessionRequired: $backChannelLogoutSessionRequired, backChannelLogoutUri: $backChannelLogoutUri, clientCredentialsGrantAccessTokenLifespan: $clientCredentialsGrantAccessTokenLifespan, clientId: $clientId, clientName: $clientName, clientSecret: $clientSecret, ClientSecretExpiresAt: $ClientSecretExpiresAt, clientUri: $clientUri, contacts: $contacts, frontchannelLogoutSessionRequired: $frontchannelLogoutSessionRequired, frontchannelLogoutUri: $frontchannelLogoutUri, grantTypes: $grantTypes, implicitGrantAccessTokenLifespan: $implicitGrantAccessTokenLifespan, implicitGrantIdTokenLifespan: $implicitGrantIdTokenLifespan, jwks: $jwks, jwksUri: $jwksUri, jwtBearerGrantAccessTokenLifespan: $jwtBearerGrantAccessTokenLifespan, logoUri: $logoUri, metadata: $metadata, policyUri: $policyUri, postLogoutRedirectUris: $postLogoutRedirectUris, redirectUris: $redirectUris, responseTypes: $responseTypes, scope: $scope, sectorIdentifierUri: $sectorIdentifierUri, subjectType: $subjectType, tokenEndpointAuthMethod: $tokenEndpointAuthMethod, tokenEndpointAuthSigningAlgorithm: $tokenEndpointAuthSigningAlgorithm, tosUri: $tosUri, userinfoSignedResponseAlgorithm: $userinfoSignedResponseAlgorithm, loginBindings: $loginBindings) {
		... OAuth2ClientFragment
	}
}
fragment OAuth2ClientFragment on OAuth2Client {
	allowedCorsOrigins
	audience
	authorizationCodeGrantAccessTokenLifespan
	authorizationCodeGrantIdTokenLifespan
	authorizationCodeGrantRefreshTokenLifespan
	backChannelLogoutUri
	clientCredentialsGrantAccessTokenLifespan
	clientId
	clientName
	clientSecret
	ClientSecretExpiresAt
	clientUri
	contacts
	createdAt
	frontchannelLogoutSessionRequired
	frontchannelLogoutUri
	grantTypes
	implicitGrantAccessTokenLifespan
	implicitGrantIdTokenLifespan
	jwks
	jwksUri
	jwtBearerGrantAccessTokenLifespan
	logoUri
	metadata
	owner
	policyUri
	postLogoutRedirectUris
	redirectUris
	responseTypes
	scope
	sectorIdentifierUri
	subjectType
	tokenEndpointAuthMethod
	tokenEndpointAuthSigningAlgorithm
	tosUri
	updatedAt
	userinfoSignedResponseAlgorithm
	organization {
		name
	}
	loginBindings {
		users {
			id
			email
		}
		groups {
			name
		}
	}
}
`

func (c *Client) UpdateOAuth2Client(ctx context.Context, allowedCorsOrigins []string, audience []string, authorizationCodeGrantAccessTokenLifespan *string, authorizationCodeGrantIDTokenLifespan *string, authorizationCodeGrantRefreshTokenLifespan *string, backChannelLogoutSessionRequired *bool, backChannelLogoutURI *string, clientCredentialsGrantAccessTokenLifespan *string, clientID string, clientName *string, clientSecret *string, clientSecretExpiresAt *int64, clientURI *string, contacts []string, frontchannelLogoutSessionRequired *bool, frontchannelLogoutURI *string, grantTypes []string, implicitGrantAccessTokenLifespan *string, implicitGrantIDTokenLifespan *string, jwks map[string]interface{}, jwksURI *string, jwtBearerGrantAccessTokenLifespan *string, logoURI *string, metadata map[string]interface{}, policyURI *string, postLogoutRedirectUris []string, redirectUris []string, responseTypes []string, scope *string, sectorIdentifierURI *string, subjectType *string, tokenEndpointAuthMethod *string, tokenEndpointAuthSigningAlgorithm *string, tosURI *string, userinfoSignedResponseAlgorithm *string, loginBindings *LoginBindingsInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOAuth2Client, error) {
	vars := map[string]interface{}{
		"allowedCorsOrigins": allowedCorsOrigins,
		"audience":           audience,
		"authorizationCodeGrantAccessTokenLifespan":  authorizationCodeGrantAccessTokenLifespan,
		"authorizationCodeGrantIdTokenLifespan":      authorizationCodeGrantIDTokenLifespan,
		"authorizationCodeGrantRefreshTokenLifespan": authorizationCodeGrantRefreshTokenLifespan,
		"backChannelLogoutSessionRequired":           backChannelLogoutSessionRequired,
		"backChannelLogoutUri":                       backChannelLogoutURI,
		"clientCredentialsGrantAccessTokenLifespan":  clientCredentialsGrantAccessTokenLifespan,
		"clientId":                          clientID,
		"clientName":                        clientName,
		"clientSecret":                      clientSecret,
		"ClientSecretExpiresAt":             clientSecretExpiresAt,
		"clientUri":                         clientURI,
		"contacts":                          contacts,
		"frontchannelLogoutSessionRequired": frontchannelLogoutSessionRequired,
		"frontchannelLogoutUri":             frontchannelLogoutURI,
		"grantTypes":                        grantTypes,
		"implicitGrantAccessTokenLifespan":  implicitGrantAccessTokenLifespan,
		"implicitGrantIdTokenLifespan":      implicitGrantIDTokenLifespan,
		"jwks":                              jwks,
		"jwksUri":                           jwksURI,
		"jwtBearerGrantAccessTokenLifespan": jwtBearerGrantAccessTokenLifespan,
		"logoUri":                           logoURI,
		"metadata":                          metadata,
		"policyUri":                         policyURI,
		"postLogoutRedirectUris":            postLogoutRedirectUris,
		"redirectUris":                      redirectUris,
		"responseTypes":                     responseTypes,
		"scope":                             scope,
		"sectorIdentifierUri":               sectorIdentifierURI,
		"subjectType":                       subjectType,
		"tokenEndpointAuthMethod":           tokenEndpointAuthMethod,
		"tokenEndpointAuthSigningAlgorithm": tokenEndpointAuthSigningAlgorithm,
		"tosUri":                            tosURI,
		"userinfoSignedResponseAlgorithm":   userinfoSignedResponseAlgorithm,
		"loginBindings":                     loginBindings,
	}

	var res UpdateOAuth2Client
	if err := c.Client.Post(ctx, "UpdateOAuth2Client", UpdateOAuth2ClientDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}

const CreateOAuth2ClientDocument = `mutation CreateOAuth2Client ($allowedCorsOrigins: [String!], $audience: [String!], $authorizationCodeGrantAccessTokenLifespan: String, $authorizationCodeGrantIdTokenLifespan: String, $authorizationCodeGrantRefreshTokenLifespan: String, $backChannelLogoutSessionRequired: Boolean, $backChannelLogoutUri: String, $clientCredentialsGrantAccessTokenLifespan: String, $clientName: String, $clientSecret: String, $ClientSecretExpiresAt: Int, $clientUri: String, $contacts: [String!], $frontchannelLogoutSessionRequired: Boolean, $frontchannelLogoutUri: String, $grantTypes: [String!], $implicitGrantAccessTokenLifespan: String, $implicitGrantIdTokenLifespan: String, $jwks: Map, $jwksUri: String, $jwtBearerGrantAccessTokenLifespan: String, $logoUri: String, $metadata: Map, $policyUri: String, $postLogoutRedirectUris: [String!], $redirectUris: [String!], $responseTypes: [String!], $scope: String, $sectorIdentifierUri: String, $subjectType: String, $tokenEndpointAuthMethod: String, $tokenEndpointAuthSigningAlgorithm: String, $tosUri: String, $userinfoSignedResponseAlgorithm: String, $loginBindings: LoginBindingsInput) {
	createOAuth2Client(allowedCorsOrigins: $allowedCorsOrigins, audience: $audience, authorizationCodeGrantAccessTokenLifespan: $authorizationCodeGrantAccessTokenLifespan, authorizationCodeGrantIdTokenLifespan: $authorizationCodeGrantIdTokenLifespan, authorizationCodeGrantRefreshTokenLifespan: $authorizationCodeGrantRefreshTokenLifespan, backChannelLogoutSessionRequired: $backChannelLogoutSessionRequired, backChannelLogoutUri: $backChannelLogoutUri, clientCredentialsGrantAccessTokenLifespan: $clientCredentialsGrantAccessTokenLifespan, clientName: $clientName, clientSecret: $clientSecret, ClientSecretExpiresAt: $ClientSecretExpiresAt, clientUri: $clientUri, contacts: $contacts, frontchannelLogoutSessionRequired: $frontchannelLogoutSessionRequired, frontchannelLogoutUri: $frontchannelLogoutUri, grantTypes: $grantTypes, implicitGrantAccessTokenLifespan: $implicitGrantAccessTokenLifespan, implicitGrantIdTokenLifespan: $implicitGrantIdTokenLifespan, jwks: $jwks, jwksUri: $jwksUri, jwtBearerGrantAccessTokenLifespan: $jwtBearerGrantAccessTokenLifespan, logoUri: $logoUri, metadata: $metadata, policyUri: $policyUri, postLogoutRedirectUris: $postLogoutRedirectUris, redirectUris: $redirectUris, responseTypes: $responseTypes, scope: $scope, sectorIdentifierUri: $sectorIdentifierUri, subjectType: $subjectType, tokenEndpointAuthMethod: $tokenEndpointAuthMethod, tokenEndpointAuthSigningAlgorithm: $tokenEndpointAuthSigningAlgorithm, tosUri: $tosUri, userinfoSignedResponseAlgorithm: $userinfoSignedResponseAlgorithm, loginBindings: $loginBindings) {
		... OAuth2ClientFragment
	}
}
fragment OAuth2ClientFragment on OAuth2Client {
	allowedCorsOrigins
	audience
	authorizationCodeGrantAccessTokenLifespan
	authorizationCodeGrantIdTokenLifespan
	authorizationCodeGrantRefreshTokenLifespan
	backChannelLogoutUri
	clientCredentialsGrantAccessTokenLifespan
	clientId
	clientName
	clientSecret
	ClientSecretExpiresAt
	clientUri
	contacts
	createdAt
	frontchannelLogoutSessionRequired
	frontchannelLogoutUri
	grantTypes
	implicitGrantAccessTokenLifespan
	implicitGrantIdTokenLifespan
	jwks
	jwksUri
	jwtBearerGrantAccessTokenLifespan
	logoUri
	metadata
	owner
	policyUri
	postLogoutRedirectUris
	redirectUris
	responseTypes
	scope
	sectorIdentifierUri
	subjectType
	tokenEndpointAuthMethod
	tokenEndpointAuthSigningAlgorithm
	tosUri
	updatedAt
	userinfoSignedResponseAlgorithm
	organization {
		name
	}
	loginBindings {
		users {
			id
			email
		}
		groups {
			name
		}
	}
}
`

func (c *Client) CreateOAuth2Client(ctx context.Context, allowedCorsOrigins []string, audience []string, authorizationCodeGrantAccessTokenLifespan *string, authorizationCodeGrantIDTokenLifespan *string, authorizationCodeGrantRefreshTokenLifespan *string, backChannelLogoutSessionRequired *bool, backChannelLogoutURI *string, clientCredentialsGrantAccessTokenLifespan *string, clientName *string, clientSecret *string, clientSecretExpiresAt *int64, clientURI *string, contacts []string, frontchannelLogoutSessionRequired *bool, frontchannelLogoutURI *string, grantTypes []string, implicitGrantAccessTokenLifespan *string, implicitGrantIDTokenLifespan *string, jwks map[string]interface{}, jwksURI *string, jwtBearerGrantAccessTokenLifespan *string, logoURI *string, metadata map[string]interface{}, policyURI *string, postLogoutRedirectUris []string, redirectUris []string, responseTypes []string, scope *string, sectorIdentifierURI *string, subjectType *string, tokenEndpointAuthMethod *string, tokenEndpointAuthSigningAlgorithm *string, tosURI *string, userinfoSignedResponseAlgorithm *string, loginBindings *LoginBindingsInput, interceptors ...clientv2.RequestInterceptor) (*CreateOAuth2Client, error) {
	vars := map[string]interface{}{
		"allowedCorsOrigins": allowedCorsOrigins,
		"audience":           audience,
		"authorizationCodeGrantAccessTokenLifespan":  authorizationCodeGrantAccessTokenLifespan,
		"authorizationCodeGrantIdTokenLifespan":      authorizationCodeGrantIDTokenLifespan,
		"authorizationCodeGrantRefreshTokenLifespan": authorizationCodeGrantRefreshTokenLifespan,
		"backChannelLogoutSessionRequired":           backChannelLogoutSessionRequired,
		"backChannelLogoutUri":                       backChannelLogoutURI,
		"clientCredentialsGrantAccessTokenLifespan":  clientCredentialsGrantAccessTokenLifespan,
		"clientName":                        clientName,
		"clientSecret":                      clientSecret,
		"ClientSecretExpiresAt":             clientSecretExpiresAt,
		"clientUri":                         clientURI,
		"contacts":                          contacts,
		"frontchannelLogoutSessionRequired": frontchannelLogoutSessionRequired,
		"frontchannelLogoutUri":             frontchannelLogoutURI,
		"grantTypes":                        grantTypes,
		"implicitGrantAccessTokenLifespan":  implicitGrantAccessTokenLifespan,
		"implicitGrantIdTokenLifespan":      implicitGrantIDTokenLifespan,
		"jwks":                              jwks,
		"jwksUri":                           jwksURI,
		"jwtBearerGrantAccessTokenLifespan": jwtBearerGrantAccessTokenLifespan,
		"logoUri":                           logoURI,
		"metadata":                          metadata,
		"policyUri":                         policyURI,
		"postLogoutRedirectUris":            postLogoutRedirectUris,
		"redirectUris":                      redirectUris,
		"responseTypes":                     responseTypes,
		"scope":                             scope,
		"sectorIdentifierUri":               sectorIdentifierURI,
		"subjectType":                       subjectType,
		"tokenEndpointAuthMethod":           tokenEndpointAuthMethod,
		"tokenEndpointAuthSigningAlgorithm": tokenEndpointAuthSigningAlgorithm,
		"tosUri":                            tosURI,
		"userinfoSignedResponseAlgorithm":   userinfoSignedResponseAlgorithm,
		"loginBindings":                     loginBindings,
	}

	var res CreateOAuth2Client
	if err := c.Client.Post(ctx, "CreateOAuth2Client", CreateOAuth2ClientDocument, &res, vars, interceptors...); err != nil {
		return nil, err
	}

	return &res, nil
}
