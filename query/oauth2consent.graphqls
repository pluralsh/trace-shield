fragment OAuth2ConsentRequestFragment on OAuth2ConsentRequest {
  challenge
  client {
    ...OAuth2ConsentClient
  }
  context
  loginChallenge
  loginSessionId
  oidcContext {
    ...OAuthConsentOIDCContext
  }
  requestUrl
  requestedAccessTokenAudience
  requestedScope
  skip
  subject
  redirectTo
}

fragment OAuthConsentOIDCContext on OidcContext {
  acrValues
  display
  idTokenHintClaims
  loginHint
  uiLocales
}

fragment OAuth2ConsentClient on OAuth2Client {
  clientId
  clientName
  logoUri
  policyUri
  scope
  tosUri
}

query GetOAuth2ConsentRequest($challenge: String!) {
  oauth2ConsentRequest(challenge: $challenge) {
    ...OAuth2ConsentRequestFragment
  }
}

mutation AcceptOAuth2ConsentRequest($challenge: String!, $grantScope: [String!], $remember: Boolean, $rememberFor: Int) {
  acceptOAuth2ConsentRequest(challenge: $challenge, grantScope: $grantScope, remember: $remember, rememberFor: $rememberFor) {
    redirectTo
  }
}

mutation RejectOAuth2ConsentRequest($challenge: String!) {
  rejectOAuth2ConsentRequest(challenge: $challenge) {
    redirectTo
  }
}
